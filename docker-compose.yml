services:
  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    container_name: user-service-compose
    ports:
      - "8001:8001"
    volumes:
      - ./user_service:/app # Mount code
    environment:
      - DATABASE_URL=postgresql://ocradmin:ocrpassword@postgres-compose:5432/ocrdb
    depends_on:
      - postgres
    networks:
      - ocr_network
    restart: unless-stopped

  storage-service:
    build:
      context: ./storage_service
      dockerfile: Dockerfile
    container_name: storage-service-compose
    ports:
      - "8003:8003"
    volumes:
      - ./storage_service/uploads:/app/uploads
      - ./storage_service:/app
    networks:
      - ocr_network
    restart: unless-stopped

  generic-ocr-service:
    build:
      context: ./generic_ocr_service
      dockerfile: Dockerfile
    container_name: generic-ocr-service-compose
    ports:
      - "8004:8004"
    volumes:
      - ./generic_ocr_service:/app 
    networks:
      - ocr_network
    restart: unless-stopped

  admin-portal-backend:
    build:
      context: ./admin_portal_backend_service
      dockerfile: Dockerfile
    container_name: admin-portal-backend-compose
    ports:
      - "8002:8002"
    volumes:
      - ./admin_portal_backend_service:/app
    environment:
      - USER_SERVICE_URL=http://user-service-compose:8001
    depends_on:
      - user-service
    networks:
      - ocr_network
    restart: unless-stopped

  ekyc-info-extraction-service: 
    build:
      context: ./ekyc_information_extraction_service
      dockerfile: Dockerfile
    container_name: ekyc-info-extraction-service-compose
    ports:
      - "8005:8005" 
    volumes:
      - ./ekyc_information_extraction_service:/app
    networks:
      - ocr_network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api-gateway-compose
    ports:
      - "8000:8000"
    volumes:
      - ./api_gateway:/app
    environment:
      - USER_SERVICE_URL=http://user-service-compose:8001
      - STORAGE_SERVICE_URL=http://storage-service-compose:8003
      - ADMIN_PORTAL_BACKEND_SERVICE_URL=http://admin-portal-backend-compose:8002
      - GENERIC_OCR_SERVICE_URL=http://generic-ocr-service-compose:8004
      - EKYC_INFO_EXTRACTION_SERVICE_URL=http://ekyc-info-extraction-service-compose:8005
      - VLM_CORE_ENHANCED_SERVICE_URL=http://localhost:8010
    depends_on:
      - user-service
      - storage-service
      - generic-ocr-service
      - admin-portal-backend
      - ekyc-info-extraction-service
    networks:
      - ocr_network
    restart: unless-stopped

  admin-portal-frontend:
    build:
      context: ./admin_portal_frontend
      dockerfile: Dockerfile
    container_name: admin-portal-frontend-py-compose
    ports:
      - "8080:8080"
    volumes:
      - ./admin_portal_frontend:/app
    environment:
      - ADMIN_PORTAL_BACKEND_URL=http://admin-portal-backend-compose:8002
    depends_on:
      - admin-portal-backend
    networks:
      - ocr_network
    restart: unless-stopped

  face-detection-service:
    build:
      context: ./face_detection_service
      dockerfile: Dockerfile
    container_name: face-detection-service-compose
    ports:
      - "8006:8006"
    volumes:
      - ./face_detection_service:/app
    networks:
      - ocr_network
    restart: unless-stopped

  face-comparison-service:
    build:
      context: ./face_comparison_service
      dockerfile: Dockerfile
    container_name: face-comparison-service-compose
    ports:
      - "8007:8007"
    volumes:
      - ./face_comparison_service:/app
    networks:
      - ocr_network
    restart: unless-stopped

  liveness-service:
    build:
      context: ./liveness_service
      dockerfile: Dockerfile
    container_name: liveness-service-compose
    ports:
      - "8008:8008"
    volumes:
      - ./liveness_service:/app
    networks:
      - ocr_network
    restart: unless-stopped

networks:
  ocr_network:
    driver: bridge

volumes:
  user_db_data:
